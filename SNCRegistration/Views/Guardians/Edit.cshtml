@model SNCRegistration.ViewModels.Guardian

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutPanel.cshtml";
}

<h2>Edit Guardian</h2>
<div>
                @if (TempData["notice"] != null)
                {<p style="color:green;">@TempData["notice"]</p> }
        </div>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

        
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.GuardianID)

        <div class="form-group">
            @Html.LabelFor(model => model.GuardianFirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.GuardianFirstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GuardianFirstName, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GuardianLastName, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.GuardianLastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GuardianLastName, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GuardianAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.GuardianAddress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GuardianAddress, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GuardianCity, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.GuardianCity, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GuardianCity, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GuardianState, htmlAttributes: new { @class = "control-label" })<br />
            @Html.DropDownListFor(model => model.GuardianState,
             new List<SelectListItem>
             {
                 new SelectListItem() {Text="Alabama", Value="AL"},
                    new SelectListItem() { Text="Alaska", Value="AK"},
                    new SelectListItem() { Text="Arizona", Value="AZ"},
                    new SelectListItem() { Text="Arkansas", Value="AR"},
                    new SelectListItem() { Text="California", Value="CA"},
                    new SelectListItem() { Text="Colorado", Value="CO"},
                    new SelectListItem() { Text="Connecticut", Value="CT"},
                    new SelectListItem() { Text="District of Columbia", Value="DC"},
                    new SelectListItem() { Text="Delaware", Value="DE"},
                    new SelectListItem() { Text="Florida", Value="FL", Selected=true},
                    new SelectListItem() { Text="Georgia", Value="GA"},
                    new SelectListItem() { Text="Hawaii", Value="HI"},
                    new SelectListItem() { Text="Idaho", Value="ID"},
                    new SelectListItem() { Text="Illinois", Value="IL"},
                    new SelectListItem() { Text="Indiana", Value="IN"},
                    new SelectListItem() { Text="Iowa", Value="IA"},
                    new SelectListItem() { Text="Kansas", Value="KS"},
                    new SelectListItem() { Text="Kentucky", Value="KY"},
                    new SelectListItem() { Text="Louisiana", Value="LA"},
                    new SelectListItem() { Text="Maine", Value="ME"},
                    new SelectListItem() { Text="Maryland", Value="MD"},
                    new SelectListItem() { Text="Massachusetts", Value="MA"},
                    new SelectListItem() { Text="Michigan", Value="MI"},
                    new SelectListItem() { Text="Minnesota", Value="MN"},
                    new SelectListItem() { Text="Mississippi", Value="MS"},
                    new SelectListItem() { Text="Missouri", Value="MO"},
                    new SelectListItem() { Text="Montana", Value="MT"},
                    new SelectListItem() { Text="Nebraska", Value="NE"},
                    new SelectListItem() { Text="Nevada", Value="NV"},
                    new SelectListItem() { Text="New Hampshire", Value="NH"},
                    new SelectListItem() { Text="New Jersey", Value="NJ"},
                    new SelectListItem() { Text="New Mexico", Value="NM"},
                    new SelectListItem() { Text="New York", Value="NY"},
                    new SelectListItem() { Text="North Carolina", Value="NC"},
                    new SelectListItem() { Text="North Dakota", Value="ND"},
                    new SelectListItem() { Text="Ohio", Value="OH"},
                    new SelectListItem() { Text="Oklahoma", Value="OK"},
                    new SelectListItem() { Text="Oregon", Value="OR"},
                    new SelectListItem() { Text="Pennsylvania", Value="PA"},
                    new SelectListItem() { Text="Rhode Island", Value="RI"},
                    new SelectListItem() { Text="South Carolina", Value="SC"},
                    new SelectListItem() { Text="South Dakota", Value="SD"},
                    new SelectListItem() { Text="Tennessee", Value="TN"},
                    new SelectListItem() { Text="Texas", Value="TX"},
                    new SelectListItem() { Text="Utah", Value="UT"},
                    new SelectListItem() { Text="Vermont", Value="VT"},
                    new SelectListItem() { Text="Virginia", Value="VA"},
                    new SelectListItem() { Text="Washington", Value="WA"},
                    new SelectListItem() { Text="West Virginia", Value="WV"},
                    new SelectListItem() { Text="Wisconsin", Value="WI"},
                    new SelectListItem() { Text="Wyoming", Value="WY"}
                    }, new { @class = "form-control", style = "width: 220px" })
            @Html.ValidationMessageFor(model => model.GuardianState, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.GuardianZip, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.GuardianZip, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GuardianZip, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GuardianCellPhone, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.GuardianCellPhone, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GuardianCellPhone, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GuardianEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.GuardianEmail, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GuardianEmail, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            <div class="btn-group" data-toggle="buttons">
                @Html.LabelFor(model => model.HealthForm, htmlAttributes: new { @class = "control-label" })  <br />
                @Html.ValidationMessageFor(model => model.HealthForm, "", new { @class = "text-danger" })
                @if (Model.HealthForm == true)
                {
                    <label class="btn btn-default active">
                        @Html.RadioButtonFor(model => model.HealthForm, "True", new { name = "HealthForm" }) Yes
                    </label>
                    <label class="btn btn-default">
                        @Html.RadioButtonFor(model => model.HealthForm, "False", new { name = "HealthForm" }) No
                    </label>
                }
                else
                {
                    <label class="btn btn-default">
                        @Html.RadioButtonFor(model => model.HealthForm, "True", new { name = "HealthForm" }) Yes
                    </label>
                    <label class="btn btn-default active">
                        @Html.RadioButtonFor(model => model.HealthForm, "False", new { name = "HealthForm" }) No
                    </label>

                }
            </div>
        </div>

        <div class="form-group">
            <div class="btn-group" data-toggle="buttons">
                @Html.LabelFor(model => model.PhotoAck, htmlAttributes: new { @class = "control-label" })  <br />
                @Html.ValidationMessageFor(model => model.PhotoAck, "", new { @class = "text-danger" })
                @if (Model.PhotoAck == true)
                {
                    <label class="btn btn-default active">
                        @Html.RadioButtonFor(model => model.PhotoAck, "True", new { name = "PhotoAck" }) Yes
                    </label>
                    <label class="btn btn-default">
                        @Html.RadioButtonFor(model => model.PhotoAck, "False", new { name = "PhotoAck" }) No
                    </label>
                }
                else
                {
                    <label class="btn btn-default">
                        @Html.RadioButtonFor(model => model.PhotoAck, "True", new { name = "PhotoAck" }) Yes
                    </label>
                    <label class="btn btn-default active">
                        @Html.RadioButtonFor(model => model.PhotoAck, "False", new { name = "PhotoAck" }) No
                    </label>

                }
            </div>
        </div>

        <div class="form-group">
          <div class="btn-group" data-toggle="buttons">
                @Html.LabelFor(model => model.Tent, htmlAttributes: new { @class = "control-label" })  <br />
                @Html.ValidationMessageFor(model => model.Tent, "", new { @class = "text-danger" })
                @if (Model.PhotoAck == true)
                {
                    <label class="btn btn-default active">
                        @Html.RadioButtonFor(model => model.Tent, "True", new { name = "Tent" }) Yes
                    </label>
                    <label class="btn btn-default">
                        @Html.RadioButtonFor(model => model.Tent, "False", new { name = "Tent" }) No
                    </label>
                }
                else
                {
                    <label class="btn btn-default">
                        @Html.RadioButtonFor(model => model.Tent, "True", new { name = "Tent" }) Yes
                    </label>
                    <label class="btn btn-default active">
                        @Html.RadioButtonFor(model => model.Tent, "False", new { name = "Tent" }) No
                    </label>

                }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AttendingCode)
            @Html.DropDownListFor(model => model.AttendingCode,
                    ViewBag.AttendanceID as SelectList, new { @class = "form-control", style = "width: 220px" })
                @Html.ValidationMessageFor(model => model.AttendingCode, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Relationship)
            @Html.DropDownListFor(model => model.Relationship,
                    ViewBag.relationshipID as SelectList, new { @class = "form-control", style = "width: 475px" })
                @Html.ValidationMessageFor(model => model.Relationship, "", new { @class = "text-danger" })
        </div>


        <div class="btn-group" data-toggle="buttons">
            @Html.LabelFor(model => model.CheckedIn)
            <br />
            @if (Model.CheckedIn == true)
            {
                <label class="btn btn-default active">
                    @Html.RadioButtonFor(model => model.CheckedIn, "True", new { name = "CheckedIn" }) Yes
                </label>
                        <label class="btn btn-default">
                            @Html.RadioButtonFor(model => model.CheckedIn, "False", new { name = "CheckedIn" }) No
                        </label>
            }
            else
            {
                <label class="btn btn-default">
                    @Html.RadioButtonFor(model => model.CheckedIn, "True", new { name = "CheckedIn" }) Yes
                </label>
                        <label class="btn btn-default active">
                            @Html.RadioButtonFor(model => model.CheckedIn, "False", new { name = "CheckedIn" }) No
                        </label>

            }
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
        </div>

        <hr />

            <div class="form-group pull-left" style="margin-left:20px;">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
            <div class="form-group pull-right" style="margin-right:20px;">
                @Html.ActionLink("Back to Guardian Details", "Details", new { id = Model.GuardianID }, new { @class = "btn btn-info" })
            </div>
            

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
